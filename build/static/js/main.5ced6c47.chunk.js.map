{"version":3,"sources":["components/Nav/Nav.js","components/Wrapper/Wrapper.js","components/Card/Cards.js","App.js","serviceWorker.js","index.js"],"names":["titleStyle","marginTop","paddingTop","Nav","props","react_default","a","createElement","className","style","headingMessage","currentScore","topScore","Wrapper","children","Card","alt","name","src","image","onClick","cardClick","id","App","state","cards","clicked","headingMsg","topscore","correct","newScore","_this","length","setState","incorrect","console","log","concat","indexOf","shuffle","j","x","i","Math","floor","random","_this2","this","components_Nav_Nav","components_Wrapper_Wrapper","map","card","Card_Cards","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2gCAkBA,IAAMA,EAAa,CACjBC,UAAW,MACXC,WAAY,OAGCC,EAlBf,SAAaC,GACX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,MAAIE,MAAOT,GAAX,wBACAK,EAAAC,EAAAC,cAAA,SACGH,EAAMM,eADT,aACmCN,EAAMO,aADzC,iBACqEP,EAAMQ,SAAU,cCF9EC,MAJf,SAAiBT,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMU,WCK1BC,SANF,SAAAX,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKS,IAAKZ,EAAMa,KAAMC,IAAKd,EAAMe,MAAOC,QAAS,kBAAMhB,EAAMiB,UAAUjB,EAAMkB,UCkFlEC,oNAjFbC,MAAQ,CACNC,QACAC,QAAS,CAAC,GACVC,WAAY,yBACZhB,aAAc,EACdiB,SAAU,KAGZC,QAAU,WACR,IAAMC,EAAWC,EAAKP,MAAME,QAAQM,OACpCD,EAAKE,SAAS,CACZtB,aAAcmB,EACdH,WAAY,aAEkB,KAA5BI,EAAKP,MAAMb,cACboB,EAAKE,SAAS,CACZN,WAAY,aAGZI,EAAKP,MAAMb,cAAgBoB,EAAKP,MAAMI,UACxCG,EAAKE,SAAS,CACZL,SAAUE,OAKhBI,UAAY,WACVH,EAAKE,SAAS,CACZtB,aAAc,EACde,QAAS,CAAC,GACVC,WAAY,wBAIhBN,UAAY,SAAAC,GACVa,QAAQC,IAAI,SAAWd,GACvBS,EAAKE,SAAS,CAAEP,QAASK,EAAKP,MAAME,QAAQW,OAAOf,KACnDa,QAAQC,IAAIL,EAAKP,MAAME,UACiB,IAApCK,EAAKP,MAAME,QAAQY,QAAQhB,IAC7BS,EAAKF,UACLE,EAAKQ,QAAQd,IAEbM,EAAKG,eAITK,QAAU,SAAAjC,GACR,IAAIkC,EAAGC,EAAGC,EACV,IAAKA,EAAIpC,EAAE0B,OAAS,EAAGU,EAAI,EAAGA,IAC5BF,EAAIG,KAAKC,MAAMD,KAAKE,UAAYH,EAAI,IACpCD,EAAInC,EAAEoC,GACNpC,EAAEoC,GAAKpC,EAAEkC,GACTlC,EAAEkC,GAAKC,EAET,OAAOnC,2EAGA,IAAAwC,EAAAC,KACP,OACE1C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyC,EAAD,CACEtC,eAAgBqC,KAAKvB,MAAMG,WAC3BhB,aAAcoC,KAAKvB,MAAMb,aACzBC,SAAUmC,KAAKvB,MAAMI,WAEvBvB,EAAAC,EAAAC,cAAC0C,EAAD,KACGF,KAAKvB,MAAMC,MAAMyB,IAAI,SAAAC,GAAI,OACxB9C,EAAAC,EAAAC,cAAC6C,EAAD,CACE/B,UAAWyB,EAAKzB,UAChBJ,KAAMkC,EAAKlC,KACXK,GAAI6B,EAAK7B,GACT+B,IAAKF,EAAK7B,GACVH,MAAOgC,EAAKhC,mBAzERmC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5ced6c47.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Nav.css\";\n\n// Component for the Navbar\n\nfunction Nav(props) {\n  return (\n    <nav className=\"navbar\">\n      <div className=\"heading\">\n        <h3 style={titleStyle}>Futurama Memory Game</h3>\n        <p>\n          {props.headingMessage} | Score: {props.currentScore} | Top Score: {props.topScore}{\" \"}\n        </p>\n      </div>\n    </nav>\n  );\n}\n\nconst titleStyle = {\n  marginTop: \"0px\",\n  paddingTop: \"5px\"\n};\n\nexport default Nav;\n","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\n// Component for the actual play area\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./Cards.css\";\r\n\r\n// Component for individual cards\r\n\r\nconst Card = props => (\r\n  <div className=\"card img-container\">\r\n    <img alt={props.name} src={props.image} onClick={() => props.cardClick(props.id)} />\r\n  </div>\r\n);\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\nimport cards from \"./cards.json\";\nimport Nav from \"./components/Nav/Nav\";\nimport Wrapper from \"./components/Wrapper/Wrapper.js\";\nimport Card from \"./components/Card/Cards\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    cards,\n    clicked: [0],\n    headingMsg: \"Click a card to begin!\",\n    currentScore: 0,\n    topscore: 0\n  };\n\n  correct = () => {\n    const newScore = this.state.clicked.length;\n    this.setState({\n      currentScore: newScore,\n      headingMsg: \"Correct!\"\n    });\n    if (this.state.currentScore === 11) {\n      this.setState({\n        headingMsg: \"You win!\"\n      });\n    }\n    if (this.state.currentScore >= this.state.topscore) {\n      this.setState({\n        topscore: newScore\n      });\n    }\n  };\n\n  incorrect = () => {\n    this.setState({\n      currentScore: 0,\n      clicked: [0],\n      headingMsg: \"You suck, loser!\"\n    });\n  };\n\n  cardClick = id => {\n    console.log(\"click \" + id);\n    this.setState({ clicked: this.state.clicked.concat(id) });\n    console.log(this.state.clicked);\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.correct();\n      this.shuffle(cards);\n    } else {\n      this.incorrect();\n    }\n  };\n\n  shuffle = a => {\n    var j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = a[i];\n      a[i] = a[j];\n      a[j] = x;\n    }\n    return a;\n  };\n\n  render() {\n    return (\n      <div>\n        <Nav\n          headingMessage={this.state.headingMsg}\n          currentScore={this.state.currentScore}\n          topScore={this.state.topscore}\n        />\n        <Wrapper>\n          {this.state.cards.map(card => (\n            <Card\n              cardClick={this.cardClick}\n              name={card.name}\n              id={card.id}\n              key={card.id}\n              image={card.image}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}